package com.ravin.api.service;

import java.util.Arrays;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.ravin.api.model.User;

@Service
public class UserService {

    @Autowired
    private RestTemplate restTemplate;

    private final String API_URL = "https://jsonplaceholder.typicode.com/users/";

    public void callAllMethods() {
        Thread t1 = new Thread(() -> {
            User user = getUserById(1L);
            System.out.println("User with ID 1: " + user.getName());
        });
        Thread t2 = new Thread(() -> {
            List<User> allUsers = getAllUsers();
            System.out.println("All users: " + allUsers.size());
        });
        Thread t3 = new Thread(() -> {
            User newUser = new User("New User", "newuser@example.com");
            User createdUser = createUser(newUser);
            System.out.println("Created user: " + createdUser.getId());
        });
        Thread t4 = new Thread(() -> {
            User userToUpdate = new User("Updated User", "updateduser@example.com");
            updateUser(2L, userToUpdate);
            System.out.println("User updated");
        });
        Thread t5 = new Thread(() -> {
            deleteUser(3L);
            System.out.println("User deleted");
        });

        t1.start();
        t2.start();
        t3.start();
        t4.start();
        t5.start();

        // Wait for all threads to finish
        try {
            t1.join();
            t2.join();
            t3.join();
            t4.join();
            t5.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public User getUserById(Long id) {
        ResponseEntity<User> response = restTemplate.getForEntity(API_URL + "/" + id, User.class);
        return response.getBody();
    }

    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        return Arrays.asList(response.getBody());
    }

    public User createUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(API_URL, user, User.class);
        return response.getBody();
    }

    public void updateUser(Long id, User user) {
        restTemplate.put(API_URL + "/" + id, user);
    }

    public void deleteUser(Long id) {
        restTemplate.delete(API_URL + "/" + id);
    }
}


package com.ravin.api.service;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.ravin.api.model.User;

@Service
public class UserService {

    @Autowired
    private RestTemplate restTemplate;
    private final String API_URL = "https://jsonplaceholder.typicode.com/users/";

    public void callAllMethods() {
        ExecutorService executorService = Executors.newFixedThreadPool(5);
        // create a Runnable for each method call
        Runnable getUserByIdTask = () -> {
            User user = getUserById(1L);
            System.out.println("getUserById result: " + user);
        };
        Runnable getAllUsersTask = () -> {
            List<User> users = getAllUsers();
            System.out.println("getAllUsers result: " + users);
        };
        Runnable createUserTask = () -> {
            User user = new User("John Doe", "johndoe@gmail.com");
            User createdUser = createUser(user);
            System.out.println("createUser result: " + createdUser);
        };
        Runnable updateUserTask = () -> {
            User user = new User("Jane Doe", "janedoe@gmail.com");
            updateUser(1L, user);
            System.out.println("updateUser completed");
        };
        Runnable deleteUserTask = () -> {
            deleteUser(1L);
            System.out.println("deleteUser completed");
        };
        // submit each task to the executor
        executorService.submit(getUserByIdTask);
        executorService.submit(getAllUsersTask);
        executorService.submit(createUserTask);
        executorService.submit(updateUserTask);
        executorService.submit(deleteUserTask);
        // shutdown the executor to terminate the threads
        executorService.shutdown();
    }

    public User getUserById(Long id) {
        ResponseEntity<User> response = restTemplate.getForEntity(API_URL + "/" + id, User.class);
        return response.getBody();
    }

    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        return Arrays.asList(response.getBody());
    }

    public User createUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(API_URL, user, User.class);
        return response.getBody();
    }

    public void updateUser(Long id, User user) {
        restTemplate.put(API_URL + "/" + id, user);
    }

    public void deleteUser(Long id) {
        restTemplate.delete(API_URL + "/" + id);
    }

}


package com.ravin.api.service;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.ravin.api.model.User;

@Service
public class UserService {

    @Autowired
    private RestTemplate restTemplate;

    private final String API_URL = "https://jsonplaceholder.typicode.com/users/";

    public static void main(String[] args) {
        UserService userService = new UserService();

        // Create multiple threads to call different methods
        Thread thread1 = new Thread(() -> userService.getAllUsers());
        Thread thread2 = new Thread(() -> userService.getUserById(1L));
        Thread thread3 = new Thread(() -> {
            User newUser = new User();
            newUser.setName("John Doe");
            newUser.setUsername("johndoe");
            newUser.setEmail("johndoe@example.com");
            userService.createUser(newUser);
        });
        Thread thread4 = new Thread(() -> {
            User userToUpdate = userService.getUserById(1L);
            userToUpdate.setName("Updated Name");
            userService.updateUser(1L, userToUpdate);
        });
        Thread thread5 = new Thread(() -> userService.deleteUser(1L));

        // Start all the threads
        thread1.start();
        thread2.start();
        thread3.start();
        thread4.start();
        thread5.start();
    }

    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        return Arrays.asList(response.getBody());
    }

    public User getUserById(Long id) {
        ResponseEntity<User> response = restTemplate.getForEntity(API_URL + "/" + id, User.class);
        return response.getBody();
    }

    public User createUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(API_URL, user, User.class);
        return response.getBody();
    }

    public void updateUser(Long id, User user) {
        restTemplate.put(API_URL + "/" + id, user);
    }

    public void deleteUser(Long id) {
        restTemplate.delete(API_URL + "/" + id);
    }
}


package com.ravin.api.service;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.ravin.api.model.User;

@Service
public class UserService {
    @Autowired
    private RestTemplate restTemplate;
    private final String API_URL = "https://jsonplaceholder.typicode.com/users/";

    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        return Arrays.asList(response.getBody());
    }

    public User getUserById(Long id) {
        ResponseEntity<User> response = restTemplate.getForEntity(API_URL + "/" + id, User.class);
        return response.getBody();
    }

    public User createUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(API_URL, user, User.class);
        return response.getBody();
    }

    public void updateUser(Long id, User user) {
        restTemplate.put(API_URL + "/" + id, user);
    }

    public void deleteUser(Long id) {
        restTemplate.delete(API_URL + "/" + id);
    }

    public void executeAllMethods() {
        ExecutorService executor = Executors.newFixedThreadPool(5);

        Runnable task1 = () -> {
            // Call the getAllUsers() method
            List<User> users = getAllUsers();
            // Process the result
            System.out.println("Result of getAllUsers(): " + users.toString());
        };

        Runnable task2 = () -> {
            // Call the getUserById() method
            User user = getUserById(1L);
            // Process the result
            System.out.println("Result of getUserById(): " + user.toString());
        };

        Runnable task3 = () -> {
            // Call the createUser() method
            User user = new User();
            user.setName("John Doe");
            user.setUsername("johndoe");
            user.setEmail("johndoe@example.com");
            User createdUser = createUser(user);
            // Process the result
            System.out.println("Result of createUser(): " + createdUser.toString());
        };

        Runnable task4 = () -> {
            // Call the updateUser() method
            User user = new User();
            user.setName("Jane Doe");
            user.setUsername("janedoe");
            user.setEmail("janedoe@example.com");
            updateUser(1L, user);
            // Process the result
            System.out.println("updateUser() method executed successfully");
        };

        Runnable task5 = () -> {
            // Call the deleteUser() method
            deleteUser(1L);
            // Process the result
            System.out.println("deleteUser() method executed successfully");
        };

        // Execute all tasks concurrently
        executor.submit(task1);
        executor.submit(task2);
        executor.submit(task3);
        executor.submit(task4);
        executor.submit(task5);

        // Shutdown the executor
        executor.shutdown();
    }
}


import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.ravin.api.model.User;

@Service
public class UserService {
    @Autowired
    private RestTemplate restTemplate;
    private final String API_URL = "https://jsonplaceholder.typicode.com/users/";
    
    public List<User> getAllUsers() {
        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        List<User> users = Arrays.asList(response.getBody());
        
        executor.schedule(() -> {
            // Do something after 20 seconds
            System.out.println("20 seconds have passed.");
        }, 20, TimeUnit.SECONDS);
        
        executor.shutdown();
        return users;
    }
    
    // Other methods...
}



package com.ravin.api.service;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.ravin.api.model.User;

@Service
public class UserService {

    @Autowired
    private RestTemplate restTemplate;
    private final String API_URL = "https://jsonplaceholder.typicode.com/users/";

    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        List<User> users = Arrays.asList(response.getBody());
        Thread t = new Thread(() -> {
            try {
                Thread.sleep(20000); // sleep for 20 seconds
                anotherMethod(); // execute the other method after 20 seconds
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        t.start();
        return users;
    }

}



package com.ravin.api.service;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.ravin.api.model.User;

@Service
public class UserService {

    @Autowired
    private RestTemplate restTemplate;

    private final String API_URL = "https://jsonplaceholder.typicode.com/users/";

    public User getUserById(Long id) {
        ResponseEntity<User> response = restTemplate.getForEntity(API_URL + "/" + id, User.class);
        return response.getBody();
    }

    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        return Arrays.asList(response.getBody());
    }

    public User createUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(API_URL, user, User.class);
        return response.getBody();
    }

    public void updateUser(Long id, User user) {
        restTemplate.put(API_URL + "/" + id, user);
    }

    public void deleteUser(Long id) {
        restTemplate.delete(API_URL + "/" + id);
    }

    public void executeAllMethods() {
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.execute(() -> {
            getUserById(1L);
            delayExecution(20);
        });
        executorService.execute(() -> {
            getAllUsers();
            delayExecution(20);
        });
        executorService.execute(() -> {
            createUser(new User());
            delayExecution(20);
        });
        executorService.execute(() -> {
            updateUser(1L, new User());
            delayExecution(20);
        });
        executorService.execute(() -> {
            deleteUser(1L);
            delayExecution(20);
        });
        executorService.shutdown();
        try {
            executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private void delayExecution(int seconds) {
        try {
            Thread.sleep(seconds * 1000L);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}



package com.ravin.api.service;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.ravin.api.model.User;

@Service
public class UserService {
    @Autowired
    private RestTemplate restTemplate;

    private final String API_URL = "https://jsonplaceholder.typicode.com/users/";

    public void executeAllMethods() {
        Thread getAllUsersThread = new Thread(new Runnable() {
            public void run() {
                List<User> users = getAllUsers();
                System.out.println("getAllUsers(): " + users);
            }
        });

        Thread getUserByIdThread = new Thread(new Runnable() {
            public void run() {
                User user = getUserById(1L);
                System.out.println("getUserById(1): " + user);
            }
        });

        Thread createUserThread = new Thread(new Runnable() {
            public void run() {
                User newUser = new User();
                newUser.setName("John Doe");
                newUser.setEmail("johndoe@example.com");
                User createdUser = createUser(newUser);
                System.out.println("createUser(): " + createdUser);
            }
        });

        Thread updateUserThread = new Thread(new Runnable() {
            public void run() {
                User userToUpdate = new User();
                userToUpdate.setName("Jane Doe");
                updateUser(1L, userToUpdate);
                System.out.println("updateUser(1): Success");
            }
        });

        Thread deleteUserThread = new Thread(new Runnable() {
            public void run() {
                deleteUser(2L);
                System.out.println("deleteUser(2): Success");
            }
        });

        getAllUsersThread.start();
        sleepForSeconds(20);
        getUserByIdThread.start();
        sleepForSeconds(20);
        createUserThread.start();
        sleepForSeconds(20);
        updateUserThread.start();
        sleepForSeconds(20);
        deleteUserThread.start();
    }

    private void sleepForSeconds(int seconds) {
        try {
            Thread.sleep(seconds * 1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        return Arrays.asList(response.getBody());
    }

    public User getUserById(Long id) {
        ResponseEntity<User> response = restTemplate.getForEntity(API_URL + "/" + id, User.class);
        return response.getBody();
    }

    public User createUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(API_URL, user, User.class);
        return response.getBody();
    }

    public void updateUser(Long id, User user) {
        restTemplate.put(API_URL + "/" + id, user);
    }

    public void deleteUser(Long id) {
        restTemplate.delete(API_URL + "/" + id);
    }
}

