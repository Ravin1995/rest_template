public class MyData {
    private Long id;
    private String name;
    // getters and setters
}


import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public class MyDataApiClient {
    private RestTemplate restTemplate;
    private String apiUrl;

    public MyDataApiClient(RestTemplate restTemplate, String apiUrl) {
        this.restTemplate = restTemplate;
        this.apiUrl = apiUrl;
    }

    public MyData getById(Long id) {
        String url = apiUrl + "/my-data/" + id;
        ResponseEntity<MyData> response = restTemplate.getForEntity(url, MyData.class);
        return response.getBody();
    }

    public List<MyData> getAll() {
        String url = apiUrl + "/my-data";
        ResponseEntity<List<MyData>> response = restTemplate.exchange(url, HttpMethod.GET, null,
                new ParameterizedTypeReference<List<MyData>>() {});
        return response.getBody();
    }

    public MyData create(MyData myData) {
        String url = apiUrl + "/my-data";
        HttpEntity<MyData> request = new HttpEntity<>(myData);
        ResponseEntity<MyData> response = restTemplate.postForEntity(url, request, MyData.class);
        return response.getBody();
    }

    public MyData update(Long id, MyData myData) {
        String url = apiUrl + "/my-data/" + id;
        HttpEntity<MyData> request = new HttpEntity<>(myData);
        ResponseEntity<MyData> response = restTemplate.exchange(url, HttpMethod.PUT, request, MyData.class);
        return response.getBody();
    }

    public void delete(Long id) {
        String url = apiUrl + "/my-data/" + id;
        restTemplate.delete(url);
    }
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/my-data")
public class MyDataController {
    private final MyDataService myDataService;

    @Autowired
    public MyDataController(MyDataService myDataService) {
        this.myDataService = myDataService;
    }

    @GetMapping("/{id}")
    public MyData getById(@PathVariable Long id) {
        return myDataService.getById(id);
    }

    @GetMapping
    public List<MyData> getAll() {
        return myDataService.getAll();
    }

    @PostMapping
    public MyData create(@RequestBody MyData myData) {
        return myDataService.create(myData);
    }

    @PutMapping("/{id}")
    public MyData update(@PathVariable Long id, @RequestBody MyData myData) {
        return myDataService.update(id, myData);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        myDataService.delete(id);
    }
}



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class MyDataService {
    private final MyDataRepository myDataRepository;

    @Autowired
    public MyDataService(MyDataRepository myDataRepository) {
        this.myDataRepository = myDataRepository;
    }

    public MyData getById(Long id) {
        return myDataRepository.findById(id).orElse(null);
    }

    public List<MyData> getAll() {
        return myDataRepository.findAll();
    }

    public MyData create(MyData myData) {
        return myDataRepository.save(myData);
		
		
		
		
		public class Book {
    private Long id;
    private String title;
    private String author;
    // getters and setters
}


@Component
public class BookClient {

    private final RestTemplate restTemplate;

    public BookClient(RestTemplateBuilder restTemplateBuilder) {
        this.restTemplate = restTemplateBuilder.build();
    }

    public List<Book> getAllBooks() {
        ResponseEntity<List<Book>> response = restTemplate.exchange(
                "https://example.com/api/books",
                HttpMethod.GET,
                null,
                new ParameterizedTypeReference<List<Book>>() {});
        return response.getBody();
    }

    public Book getBookById(Long id) {
        ResponseEntity<Book> response = restTemplate.getForEntity(
                "https://example.com/api/books/" + id,
                Book.class);
        return response.getBody();
    }

    public Book createBook(Book book) {
        ResponseEntity<Book> response = restTemplate.postForEntity(
                "https://example.com/api/books",
                book,
                Book.class);
        return response.getBody();
    }

    public void updateBook(Book book) {
        restTemplate.put(
                "https://example.com/api/books/" + book.getId(),
                book);
    }

    public void deleteBook(Long id) {
        restTemplate.delete(
                "https://example.com/api/books/" + id);
    }
}



@RestController
@RequestMapping("/api/books")
public class BookController {

    private final BookClient bookClient;

    public BookController(BookClient bookClient) {
        this.bookClient = bookClient;
    }

    @GetMapping
    public List<Book> getAllBooks() {
        return bookClient.getAllBooks();
    }

    @GetMapping("/{id}")
    public Book getBookById(@PathVariable Long id) {
        return bookClient.getBookById(id);
    }

    @PostMapping
    public Book createBook(@RequestBody Book book) {
        return bookClient.createBook(book);
    }

    @PutMapping("/{id}")
    public void updateBook(@PathVariable Long id, @RequestBody Book book) {
        book.setId(id);
        bookClient.updateBook(book);
    }

    @DeleteMapping("/{id}")
    public void deleteBook(@PathVariable Long id) {
        bookClient.deleteBook(id);
    }
}




@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping
    public List<User> getAllUsers() {
        return userService.getAllUsers();
    }

    @GetMapping("/{id}")
    public User getUserById(@PathVariable Long id) {
        return userService.getUserById(id);
    }

    @PostMapping
    public User createUser(@RequestBody User user) {
        return userService.createUser(user);
    }

    @PutMapping("/{id}")
    public void updateUser(@PathVariable Long id, @RequestBody User user) {
        userService.updateUser(id, user);
    }

    @DeleteMapping("/{id}")
    public void deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
    }
}



@Service
public class UserService {

    private final String API_URL = "https://example.com/api/users";
    private final RestTemplate restTemplate;

    public UserService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public List<User> getAllUsers() {
        ResponseEntity<User[]> response = restTemplate.getForEntity(API_URL, User[].class);
        return Arrays.asList(response.getBody());
    }

    public User getUserById(Long id) {
        ResponseEntity<User> response = restTemplate.getForEntity(API_URL + "/" + id, User.class);
        return response.getBody();
    }

    public User createUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(API_URL, user, User.class);
        return response.getBody();
    }

    public void updateUser(Long id, User user) {
        restTemplate.put(API_URL + "/" + id, user);
    }

    public void deleteUser(Long id) {
        restTemplate.delete(API_URL + "/" + id);
    }
}



public class User {
    private Long id;
    private String name;
    private String email;

    // getters and setters
}






   



