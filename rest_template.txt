@Bean
public RestTemplate restTemplate() {
    return new RestTemplate();
}


ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
String responseBody = response.getBody();


HttpHeaders headers = new HttpHeaders();
headers.setContentType(MediaType.APPLICATION_JSON);
HttpEntity<String> request = new HttpEntity<>(body, headers);
ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);
String responseBody = response.getBody();




@RestController
public class MyController {
    @Autowired
    private RestTemplate restTemplate;

    @GetMapping("/my-api")
    public String myApi() {
        ResponseEntity<String> response = restTemplate.getForEntity("http://external-api.com", String.class);
        String responseBody = response.getBody();
        return responseBody;
    }
}


@Bean
public RestTemplate restTemplate(RestTemplateBuilder builder) {
    return builder
            .setConnectTimeout(Duration.ofSeconds(10))
            .setReadTimeout(Duration.ofSeconds(10))
            .build();
}


public interface MyApi {
    @GetMapping("/users")
    List<User> getUsers();

    @GetMapping("/users/{id}")
    User getUser(@PathVariable Long id);

    @PostMapping("/users")
    User createUser(@RequestBody User user);

    @PutMapping("/users/{id}")
    User updateUser(@PathVariable Long id, @RequestBody User user);

    @DeleteMapping("/users/{id}")
    void deleteUser(@PathVariable Long id);
}



public class MyApiImpl implements MyApi {

    private final RestTemplate restTemplate;
    private final String baseUrl;

    public MyApiImpl(RestTemplate restTemplate, @Value("${api.base-url}") String baseUrl) {
        this.restTemplate = restTemplate;
        this.baseUrl = baseUrl;
    }

    @Override
    public List<User> getUsers() {
        ResponseEntity<List<User>> response = restTemplate.exchange(baseUrl + "/users", HttpMethod.GET, null, new ParameterizedTypeReference<List<User>>() {});
        return response.getBody();
    }

    @Override
    public User getUser(Long id) {
        ResponseEntity<User> response = restTemplate.getForEntity(baseUrl + "/users/" + id, User.class);
        return response.getBody();
    }

    @Override
    public User createUser(User user) {
        ResponseEntity<User> response = restTemplate.postForEntity(baseUrl + "/users", user, User.class);
        return response.getBody();
    }

    @Override
    public User updateUser(Long id, User user) {
        restTemplate.put(baseUrl + "/users/" + id, user);
        return getUser(id);
    }

    @Override
    public void deleteUser(Long id) {
        restTemplate.delete(baseUrl + "/users/" + id);
    }
}


@Configuration
public class MyApiConfiguration {
    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplateBuilder().build();
    }

    @Bean
    public MyApi myApi(RestTemplate restTemplate, @Value("${api.base-url}") String baseUrl) {
        return new MyApiImpl(restTemplate, baseUrl);
    }
}
@RestController
@RequestMapping("/api")
public class MyApiController {

    private final MyApi myApi;

    public MyApiController(MyApi myApi) {
        this.myApi = myApi;
    }

    @GetMapping("/users")
    public List<User> getUsers() {
        return myApi.getUsers();
    }

    @GetMapping("/users/{id}")
    public User getUser(@PathVariable Long id) {
        return myApi.getUser(id);
    }

    @PostMapping("/users")
    public User createUser(@RequestBody User user) {
        return myApi.createUser(user);
    }

    @PutMapping("/users/{id}")
    public User updateUser(@PathVariable Long id, @RequestBody User user) {
        return myApi.updateUser(id, user);
    }

    @DeleteMapping("/users/{id}")
    public void deleteUser(@PathVariable Long id) {
        myApi.deleteUser(id);
    }
}



@RestController
@RequestMapping("/api")
public class ApiController {

  private final RestTemplate restTemplate;

  public ApiController(RestTemplateBuilder restTemplateBuilder) {
    this.restTemplate = restTemplateBuilder.build();
  }

  @GetMapping("/external-api")
  public ResponseEntity<List<MyModel>> getAllFromExternalApi() {
    ResponseEntity<MyModel[]> response = restTemplate.getForEntity("https://external-api.com/api/my-models", MyModel[].class);
    MyModel[] myModels = response.getBody();
    List<MyModel> myModelList = Arrays.asList(myModels);
    return ResponseEntity.ok(myModelList);
  }

  @GetMapping("/my-models")
  public ResponseEntity<List<MyModel>> getAllFromLocalApi() {
    // use a service class to retrieve all the data from a database
    List<MyModel> myModelList = myService.getAll();
    return ResponseEntity.ok(myModelList);
  }

  @PostMapping("/my-models")
  public ResponseEntity<MyModel> create(@RequestBody MyModel myModel) {
    // use a service class to save the data to a database
    MyModel createdMyModel = myService.create(myModel);
    return ResponseEntity.status(HttpStatus.CREATED).body(createdMyModel);
  }

  @PutMapping("/my-models/{id}")
  public ResponseEntity<MyModel> update(@PathVariable Long id, @RequestBody MyModel myModel) {
    // use a service class to update the data in a database
    MyModel updatedMyModel = myService.update(id, myModel);
    return ResponseEntity.ok(updatedMyModel);
  }

  @DeleteMapping("/my-models/{id}")
  public ResponseEntity<Void> delete(@PathVariable Long id) {
    // use a service class to delete the data from a database
    myService.delete(id);
    return ResponseEntity.noContent().build();
  }

}



<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>


@Bean
public RestTemplate restTemplate() {
    return new RestTemplate();
}


@RestController
@RequestMapping("/api")
public class MyController {

    @Autowired
    private RestTemplate restTemplate;

    @GetMapping("/items/{itemId}")
    public Item getItem(@PathVariable("itemId") Long itemId) {
        String url = "http://example.com/api/items/{itemId}";
        return restTemplate.getForObject(url, Item.class, itemId);
    }

    @PostMapping("/items")
    public ResponseEntity<Void> createItem(@RequestBody Item item) {
        String url = "http://example.com/api/items";
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Item> requestEntity = new HttpEntity<>(item, headers);
        restTemplate.postForObject(url, requestEntity, Void.class);
        return ResponseEntity.status(HttpStatus.CREATED).build();
    }

    @PutMapping("/items/{itemId}")
    public ResponseEntity<Void> updateItem(@PathVariable("itemId") Long itemId, @RequestBody Item item) {
        String url = "http://example.com/api/items/{itemId}";
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Item> requestEntity = new HttpEntity<>(item, headers);
        restTemplate.exchange(url, HttpMethod.PUT, requestEntity, Void.class, itemId);
        return ResponseEntity.status(HttpStatus.OK).build();
    }

    @DeleteMapping("/items/{itemId}")
    public ResponseEntity<Void> deleteItem(@PathVariable("itemId") Long itemId) {
        String url = "http://example.com/api/items/{itemId}";
        restTemplate.delete(url, itemId);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }

}

==========================================================================


@GetMapping("/users/{id}")
public ResponseEntity<User> getUser(@PathVariable Long id) {
    RestTemplate restTemplate = new RestTemplate();
    User user = restTemplate.getForObject("http://localhost:8080/users/{id}", User.class, id);
    return ResponseEntity.ok(user);
}

=============================================================

import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

public class ApiIntegrationService {

    private final RestTemplate restTemplate;

    public ApiIntegrationService() {
        this.restTemplate = new RestTemplate();
    }

    public <T> ResponseEntity<T> callApi(String url, HttpMethod method, Object requestBody, Class<T> responseType) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");

        HttpEntity<Object> httpEntity = new HttpEntity<>(requestBody, headers);

        ResponseEntity<T> response = restTemplate.exchange(url, method, httpEntity, responseType);

        return new ResponseEntity<>(response.getBody(), response.getHeaders(), HttpStatus.valueOf(response.getStatusCodeValue()));
    }
}


In the above code, we have defined an ApiIntegrationService class which is responsible for making API calls. It has a callApi method which takes in the following parameters:

url: the URL of the API endpoint to be called
method: the HTTP method to be used for the API call (GET, POST, PUT, DELETE, etc.)
requestBody: the request body to be sent with the API call (if any)
responseType: the class type of the expected response from the API call
The callApi method creates an instance of RestTemplate and sets the necessary headers in an HttpHeaders object. It then creates an HttpEntity object which encapsulates the request body and headers, and uses RestTemplate's exchange method to make the API call. The response is then wrapped in a ResponseEntity object which includes the response body, headers, and status code, and returned.

Note that we are using HttpStatus.valueOf(response.getStatusCodeValue()) to return a natural HTTP status code in the response. This ensures that the response code returned by our API matches the response code returned by the external API, making it more natural and easy to understand.

================================================================================


HttpHeaders headers = new HttpHeaders();
headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);

HttpEntity<String> entity = new HttpEntity<>("body", headers);

ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);

=========================================================================

@GetMapping("/client-data")
public ResponseEntity<Object> getClientData() {
    ResponseEntity<Object> response = restTemplate.getForObject(clientUrl, Object.class);
    return new ResponseEntity<>(response.getBody(), HttpStatus.valueOf(response.getStatusCodeValue()));
}



==========================================================================
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

@RestController
public class ApiController {

    @Autowired
    private RestTemplate restTemplate;

    @GetMapping("/api")
    public ResponseEntity<String> consumeApi() {
        String apiUrl = "https://example.com/api/endpoint"; // replace with the actual API endpoint URL
        
        try {
            String response = restTemplate.getForObject(apiUrl, String.class);
            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}



===============================

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

@RestController
public class ApiController {

    @Autowired
    private RestTemplate restTemplate;

    @GetMapping("/api")
    public ResponseEntity<String> consumeApi() {
        String apiUrl = "https://example.com/api/endpoint"; // replace with the actual API endpoint URL
        
        try {
            String response = restTemplate.getForObject(apiUrl, String.class);
            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}


============================
public class ClientResponse {
    private String message;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}




@RestController
public class ClientController {
    @Autowired
    private RestTemplate restTemplate;

    @GetMapping("/client-url")
    public ResponseEntity<?> consumeClientUrl() {
        String url = "https://example.com/client-url";

        try {
            ResponseEntity<ClientResponse> responseEntity = restTemplate.getForEntity(url, ClientResponse.class);
            return new ResponseEntity<>(responseEntity.getStatusCode(), HttpStatus.OK);
        } catch (RestClientException e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}



@Configuration
public class RestTemplateConfig {
    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}



